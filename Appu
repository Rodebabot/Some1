import pandas as pd
import tkinter as tk
from tkinter import Entry, Button, StringVar
from tkinter.ttk import Combobox
from PIL import Image, ImageTk  # Import Pillow for handling images
import itertools

# Read the Excel file into a DataFrame
df = pd.read_excel('your_excel_file.xlsx')

# Create a dictionary to store URLs
url_dict = {}

# Generate all combinations of words from the first and second columns
for index, row in df.iterrows():
    words1 = row['1st Column'].split()  # Split the words by space
    words2 = row['2nd Column'].split()

    # Generate all permutations of words from the two columns
    permutations = list(itertools.permutations(words1 + words2))

    # Add each permutation to the dictionary
    for perm in permutations:
        combination = ' '.join(perm)
        url_dict[combination] = row['3rd Column']

# Create a tkinter GUI
root = tk.Tk()
root.title("URL Opener")

# Set a background image
background_image = Image.open("background_image.png")  # Replace with your image file
background_photo = ImageTk.PhotoImage(background_image)
background_label = tk.Label(root, image=background_photo)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# Create a logo image
logo_image = Image.open("logo.png")  # Replace with your logo image file
logo_photo = ImageTk.PhotoImage(logo_image)
logo_label = tk.Label(root, image=logo_photo)
logo_label.pack(pady=20)

# Create a StringVar to store the user input
user_input_var = StringVar()

# Create an Entry widget for user input with autocomplete
entry = Entry(root, textvariable=user_input_var, font=("Helvetica", 14))
entry.pack()

# Create a Combobox widget for suggestions
suggestion_combobox = Combobox(root, font=("Helvetica", 12))
suggestion_combobox.pack()

# Function to handle button click and open the URL
def open_url():
    user_input = user_input_var.get()
    user_input = user_input.lower()  # Convert input to lowercase for case-insensitive matching

    # Check if the user input exactly matches a combination in the Excel file
    if user_input in url_dict:
        url = url_dict[user_input]
        # Use the webbrowser library to open the URL
        import webbrowser
        webbrowser.open(url)
    else:
        print("URL not found for the input.")

# Create a button to submit the input
submit_button = Button(root, text="Submit", command=open_url, font=("Helvetica", 14))
submit_button.pack(pady=10)

# Implement real-time suggestions based on user input
def suggest():
    user_input = user_input_var.get()
    suggestions = [key for key in url_dict.keys() if key.startswith(user_input)]
    if suggestions:
        # Show only the remaining part of a possible combination
        remaining_suggestions = [s[len(user_input):] for s in suggestions]
        suggestion_combobox['values'] = tuple(remaining_suggestions)
    else:
        suggestion_combobox.set("")  # Clear the suggestion_combobox if no suggestions

# Bind the suggest function to the Entry widget for real-time suggestions
entry.bind('<KeyRelease>', lambda event: suggest())

# Function to complete the combination and trigger the URL upon selection
def select_suggestion(event):
    selected_suggestion = suggestion_combobox.get()
    user_input = user_input_var.get()
    user_input += selected_suggestion  # Complete the combination
    user_input_var.set(user_input)  # Update the user input
    open_url()  # Trigger the URL

# Bind the select_suggestion function to the Combobox's <<ComboboxSelected>> event
suggestion_combobox.bind('<<ComboboxSelected>>', select_suggestion)

root.mainloop()
