import pandas as pd
import numpy as np

# Load the dataset
file_path = '/mnt/data/your_excel_file.xlsx'  # Replace with the actual file path
df = pd.read_excel(file_path)

# Ensure the column names are correct as per the provided screenshot
df.columns = ['Unique Eventid', 'Legal Entity', 'Trade ID', 'ROC', 'Age', 'Age Band', 'Counterparty Name', 'Business Event', 'Product Representation', 'Days Spent', 'Action Items']

# Define the threshold for good performance
good_performance_threshold = 2  # Modify this threshold as needed

# Calculate the average days spent per combination
average_days_spent = df.groupby(['ROC', 'Age Band', 'Legal Entity', 'Counterparty Name', 'Business Event', 'Product Representation']).agg({'Days Spent': 'mean'}).reset_index()

# Filter for good performance
good_performance = average_days_spent[average_days_spent['Days Spent'] < good_performance_threshold]

# Display the combinations with good performance
print("Combinations with Good Performance:")
print(good_performance)

# Existing code for Action Item Analysis (ensure this is integrated into your Jupyter Notebook or script)

action_items = [
    "Technical Hold (IOF)",
    "Technical Issue",
    "Transaction Legal Owned",
    "Rejected Post Review",
    "Pending Draft",
    "Pending Draft (Drafting)",
    "Processing Request",
    "Pending Action",
    "Waiting Internal Update",
    "Incoming client request",
    "Incoming External Update",
    "New Doc Update",
    "Additional Info",
]

def filter_top_quarter(df, action_item):
    filter_col = df['Action Items'].apply(lambda x: action_item in x)
    filtered_df = df[filter_col]
    filtered_df['Top_Quarter'] = pd.qcut(filtered_df['Days Spent'], q=4, labels=["Q1", "Q2", "Q3", "Q4"])
    return filtered_df

# Iterate over action items and process dataframes
processed_dfs = []
for item in action_items:
    processed_df = filter_top_quarter(df, item)
    processed_dfs.append(processed_df)

# Combine all processed dataframes
combined_df = pd.concat(processed_dfs)

# Display the processed dataframes
for idx, item in enumerate(action_items):
    print(f"Action Item: {item}")
    print(processed_dfs[idx].head())

# Saving the data to a CSV file (if needed)
combined_df.to_csv('processed_action_items.csv', index=False)

# Integrate the 'good performance' data with action items analysis
good_performance_action_items = combined_df[combined_df.set_index(['ROC', 'Age Band', 'Legal Entity', 'Counterparty Name', 'Business Event', 'Product Representation']).index.isin(good_performance.set_index(['ROC', 'Age Band', 'Legal Entity', 'Counterparty Name', 'Business Event', 'Product Representation']).index)]

print("Good Performance Action Items:")
print(good_performance_action_items.head())

# Save good performance action items to CSV (if needed)
good_performance_action_items.to_csv('good_performance_action_items.csv', index=False)
