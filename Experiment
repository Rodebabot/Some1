import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import pandas as pd
import openpyxl

# Load the Excel file into a DataFrame
df = pd.read_excel('company_data.xlsx')

# Initialize the Dash app
app = dash.Dash(__name__)

# Define the app layout
app.layout = html.Div([
    dcc.Dropdown(
        id='company-dropdown',
        options=[{'label': company, 'value': company} for company in df['Company']],
        placeholder="Select a company"
    ),
    html.Div(id='variable-values'),
    dcc.RadioItems(
        id='final-update',
        options=[
            {'label': 'Downfall', 'value': 'Downfall'},
            {'label': 'Rise', 'value': 'Rise'}
        ],
        labelStyle={'display': 'block'},
        style={'margin-top': '20px'}
    )
])

# Define callback functions
@app.callback(
    Output('variable-values', 'children'),
    Input('company-dropdown', 'value')
)
def display_variables(selected_company):
    if not selected_company:
        raise PreventUpdate

    # Filter data for the selected company
    selected_data = df[df['Company'] == selected_company]

    # Create a table to display variables and values
    table = html.Table(
        # Header
        [html.Tr([html.Th(col) for col in selected_data.columns[1:-2]])] +
        # Data
        [html.Tr([html.Td(selected_data.iloc[0][col]) for col in selected_data.columns[1:-2]])]
    )

    return table

@app.callback(
    Output('final-update', 'value'),
    Input('final-update', 'value'),
    Input('company-dropdown', 'value')
)
def update_final_update(value, selected_company):
    if value is not None and app.callback_context.triggered[0]['prop_id'] == 'final-update.value':
        # Update the 'Final Update' column in the DataFrame
        df.loc[df['Company'] == selected_company, 'Final Update'] = value

        # Save the updated DataFrame back to the Excel file using openpyxl
        with pd.ExcelWriter('company_data.xlsx', engine='openpyxl', mode='a') as writer:
            df.to_excel(writer, sheet_name='Sheet1', index=False)

    return value

if __name__ == '__main__':
    app.run_server(debug=True)
