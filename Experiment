import pandas as pd
import numpy as np

# Load the dataset
file_path = '/mnt/data/your_excel_file.xlsx'  # Replace with the actual file path
df = pd.read_excel(file_path)

# Ensure the column names are correct as per the provided screenshot
df.columns = ['Unique Eventid', 'Legal Entity', 'Trade ID', 'ROC', 'Age', 'Age Band', 'Counterparty Name', 'Business Event', 'Product Representation', 'Days Spent', 'Action Items']

# Group by ROC and calculate the average days spent, standard deviation, min, and max
roc_stats = df.groupby('ROC')['Days Spent'].agg(['mean', 'std', 'min', 'max']).reset_index()

# Calculate the coefficient of variation (CV) as std/mean
roc_stats['Coefficient of Variation'] = roc_stats['std'] / roc_stats['mean']

# Determine the median CV and average days spent for tagging
median_cv = roc_stats['Coefficient of Variation'].median()
median_days_spent = roc_stats['mean'].median()

# Create new columns for volatility and average days spent tagging
roc_stats['Volatility Tag'] = roc_stats['Coefficient of Variation'].apply(lambda x: 'High' if x > median_cv else 'Low')
roc_stats['Average Days Spent Tag'] = roc_stats['mean'].apply(lambda x: 'High' if x > median_days_spent else 'Low')

# Define a function to calculate the percentage distribution in 10-day groups
def calculate_percentage_groups(roc):
    # Filter the data for the specific ROC
    roc_data = df[df['ROC'] == roc]['Days Spent']
    min_val, max_val = roc_data.min(), roc_data.max()
    groups = range(int(min_val), int(max_val) + 10, 10)
    
    # Calculate the percentage of values in each group
    group_percentages = []
    for i in range(len(groups) - 1):
        group_range = (groups[i], groups[i + 1] - 1)
        pct = ((roc_data >= group_range[0]) & (roc_data <= group_range[1])).mean() * 100
        group_percentages.append(f"{group_range[0]}-{group_range[1]} ({pct:.2f}%)")
    
    return group_percentages

# Apply the function to each ROC and create a new column for the groups
roc_stats['Days Spent Distribution'] = roc_stats['ROC'].apply(lambda x: calculate_percentage_groups(x))

# Rename columns for clarity
roc_stats.columns = ['ROC', 'Average Days Spent', 'Standard Deviation', 'Min Days Spent', 'Max Days Spent', 'Volatility (Coefficient of Variation)', 'Volatility Tag', 'Average Days Spent Tag', 'Days Spent Distribution']

# Display the results
print(roc_stats)

# Save the results to an Excel file
roc_stats.to_excel('/mnt/data/roc_analysis_with_groups.xlsx', index=False)

print("ROC analysis with groups and volatility tagging saved to roc_analysis_with_groups.xlsx")
