import pandas as pd
import tkinter as tk
from tkinter import Entry, Button, StringVar
from tkinter.ttk import Combobox
import itertools

# Read the Excel file into a DataFrame
df = pd.read_excel('your_excel_file.xlsx')

# Create a dictionary to store URLs
url_dict = {}

# Generate all combinations of words from the first and second columns
for index, row in df.iterrows():
    words1 = row['1st Column'].split()  # Split the words by space
    words2 = row['2nd Column'].split()

    # Generate all permutations of words from the two columns
    permutations = list(itertools.permutations(words1 + words2))

    # Add each permutation to the dictionary
    for perm in permutations:
        combination = ' '.join(perm)
        url_dict[combination] = row['3rd Column']

# Create a tkinter GUI
root = tk.Tk()
root.title("URL Opener")

# Create a StringVar to store the user input
user_input_var = StringVar()

# Create an Entry widget for user input with autocomplete
entry = Entry(root, textvariable=user_input_var)
entry.pack()

# Create a Combobox widget for suggestions
suggestion_combobox = Combobox(root)
suggestion_combobox.pack()

# Function to handle button click and open the URL
def open_url():
    user_input = user_input_var.get()
    user_input = user_input.lower()  # Convert input to lowercase for case-insensitive matching

    # Find all combinations from the Excel file that are present in the user input
    matching_combinations = [combination for combination in url_dict.keys() if combination in user_input]

    # Sort the matching combinations by length in descending order
    matching_combinations.sort(key=len, reverse=True)

    if matching_combinations:
        longest_combination = matching_combinations[0]
        url = url_dict[longest_combination]
        # Use the webbrowser library to open the URL
        import webbrowser
        webbrowser.open(url)
    else:
        print("URL not found for the input.")

# Create a button to submit the input
submit_button = Button(root, text="Submit", command=open_url)
submit_button.pack()

# Implement real-time suggestions based on user input
def suggest():
    user_input = user_input_var.get()
    
    # Extract relevant words from the input that match combinations in the Excel file
    relevant_words = [word for word in user_input.split() if any(combination in word for combination in url_dict.keys())]
    
    if relevant_words:
        suggestions = [key for key in url_dict.keys() if any(word in key.split() for word in relevant_words)]
        if suggestions:
            # Update the autocomplete list
            suggestion_combobox['values'] = tuple(suggestions)
            suggestion_combobox.set(suggestions[0])  # Set the first suggestion as default
        else:
            suggestion_combobox.set("")  # Clear the suggestion_combobox if no suggestions
    else:
        suggestion_combobox.set("")  # Clear the suggestion_combobox if no relevant words found

# Bind the suggest function to the Entry widget for real-time suggestions
entry.bind('<KeyRelease>', lambda event: suggest())

root.mainloop()
