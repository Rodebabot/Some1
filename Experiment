import pandas as pd

def convert_date_format(df, date_col="Value Date", target_format="%Y-%m-%d-%H-%M-%S"):
  """
  Converts a date column in a DataFrame to the specified format.

  Args:
      df (pandas.DataFrame): The DataFrame containing the date column.
      date_col (str, optional): The name of the column containing the dates. Defaults to "Value Date".
      target_format (str, optional): The desired format for the converted dates. Defaults to "%Y-%m-%d-%H-%M-%S".

  Returns:
      pandas.DataFrame: The DataFrame with the converted date column.
  """
  # Try different parsing formats to handle potential variations
  for fmt in [
      "%d/%m/%Y", "%m/%d/%Y", "%Y-%m-%d", "%d-%m-%Y", "%Y/%m/%d", "%m-%d-%Y"
  ]:
    try:
      # Attempt parsing with the current format
      df[date_col] = pd.to_datetime(df[date_col], format=fmt)
      break  # Successful parsing, break the loop
    except ValueError:
      pass  # Parsing failed, continue trying other formats

  # If parsing failed with all formats, raise an error
  else:
    raise ValueError(f"Failed to parse dates in column '{date_col}' with any provided format.")

  # Convert the parsed datetime objects to the target format
  df[date_col] = df[date_col].dt.strftime(target_format)
  return df

# Example usage
df = pd.DataFrame({'Value Date': ['10/20/2023', '01-02-2024', '2024-03-05']})
df = convert_date_format(df.copy())  # Avoid modifying original DataFrame
print(df)
