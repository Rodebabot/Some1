import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.metrics import classification_report
from sklearn.base import BaseEstimator, TransformerMixin

# Load the Excel file
file_path = '/mnt/data/your_excel_file.xlsx'  # Update with the correct file path
df = pd.read_excel(file_path)

# Display the first few rows of the dataframe
print(df.head())

# Define a custom transformer to extract the text column
class TextExtractor(BaseEstimator, TransformerMixin):
    def __init__(self, column):
        self.column = column

    def fit(self, X, y=None):
        return self

    def transform(self, X):
        return X[self.column]

# Features and target
X = df.drop(columns=['Notes'])
y = df['Notes']

# Define preprocessing for numerical columns (scaling)
num_features = ['Settlement Amount USD', 'Unmatched Amount USD']
num_transformer = StandardScaler()

# Define preprocessing for categorical columns (one-hot encoding)
cat_features = X.columns.difference(num_features)
cat_transformer = OneHotEncoder(handle_unknown='ignore')

# Define TF-IDF vectorizer for the "Notes" column
text_transformer = Pipeline(steps=[
    ('tfidf', TfidfVectorizer())
])

# Combine preprocessing steps
preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_transformer, num_features),
        ('cat', cat_transformer, cat_features),
        ('text', text_transformer, 'Notes')
    ],
    remainder='drop'
)

# Define the model pipeline
model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
