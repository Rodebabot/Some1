import tkinter as tk
from tkinter import ttk
import webbrowser
import pandas as pd
import datetime
import smtplib
from email.mime.text import MIMEText
import win32com.client as win32

# Initialize data as an empty DataFrame
data = pd.DataFrame(columns=["Keyword", "DisplayWord", "URL"])

# A set to store unique display words
unique_display_words = set()

def open_url():
    selected_display_word = display_word_var.get()
    if selected_display_word:
        url = data[data["DisplayWord"] == selected_display_word]["URL"].values[0]
        webbrowser.open(url)
    else:
        show_no_match_dialog()

def calculate_match_score(search_keywords, keywords):
    return len(search_keywords.intersection(keywords))

def update_display_words(*args):
    global data  # Declare data as a global variable
    search_keywords = set(search_var.get().lower().split())
    suggestions = []
    best_match_score = 0

    for _, row in data.iterrows():
        keywords = set(str(row["Keyword"]).lower().split())
        match_score = calculate_match_score(search_keywords, keywords)

        if match_score > best_match_score:
            best_match_score = match_score
            suggestions = [row["DisplayWord"]]
        elif match_score == best_match_score:
            suggestions.append(row["DisplayWord"])

    # Clear the set of unique display words
    unique_display_words.clear()

    # Filter out duplicate display words and store them in the set
    unique_suggestions = []
    for suggestion in suggestions:
        if suggestion not in unique_display_words:
            unique_display_words.add(suggestion)
            unique_suggestions.append(suggestion)

    if unique_suggestions:
        display_word_combobox['values'] = unique_suggestions
    else:
        display_word_combobox.set('')  # Clear the combobox when no suggestions

def show_no_match_dialog():
    no_match_window = tk.Toplevel()
    no_match_window.title("No Match Found")

    # Add a background image
    background_image = tk.PhotoImage(file="background.png")  # Replace with your image file
    background_label = tk.Label(no_match_window, image=background_image)
    background_label.place(relwidth=1, relheight=1)

    # Style for labels with white text on a transparent background
    label_style = ttk.Style()
    label_style.configure("White.TLabel", foreground="white")

    message_label = ttk.Label(no_match_window, text="No matching display word found", style="White.TLabel")
    message_label.pack(pady=10)

    urgent_button = ttk.Button(no_match_window, text="Urgent: Ask Cbit for the data", command=send_email)
    urgent_button.pack(pady=5)

    general_button = ttk.Button(no_match_window, text="General: Add the Keyword", command=add_keyword_to_excel)
    general_button.pack(pady=5)

def send_email():
    outlook = win32.Dispatch("Outlook.Application")
    mail = outlook.CreateItem(0)
    mail.Subject = "Urgent: Data Request"
    mail.Body = f"Requested Keyword: {search_var.get()}"

    mail.To = "recipient_email@example.com"  # Replace with the recipient's email address
    mail.Send()

    print("Email sent via Outlook")

def add_keyword_to_excel():
    global data  # Declare data as a global variable
    new_keyword = search_var.get()
    current_datetime = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    new_row = {"Keyword": new_keyword, "DisplayWord": current_datetime, "URL": ""}
    data = pd.concat([data, pd.DataFrame([new_row])], ignore_index=True)

    # Save the updated data to the Excel file
    data.to_excel('your_excel_file.xlsx', index=False, engine='openpyxl')

app = tk.Tk()
app.title("Keyword Search App")

# Add a logo image
logo_image = tk.PhotoImage(file="logo.png")  # Replace with your logo file
logo_label = tk.Label(app, image=logo_image)
logo_label.pack()

search_label = ttk.Label(app, text="Enter keywords:")
search_label.pack(pady=10)

search_var = tk.StringVar()
search_entry = ttk.Entry(app, textvariable=search_var)
search_entry.pack()

display_word_label = ttk.Label(app, text="Select a display word:")
display_word_label.pack(pady=10)

display_word_var = tk.StringVar()
display_word_combobox = ttk.Combobox(app, textvariable=display_word_var)
display_word_combobox.pack()

search_var.trace_add("write", update_display_words)

open_button = ttk.Button(app, text="Open URL", command=open_url)
open_button.pack(pady=10)

app.mainloop()
