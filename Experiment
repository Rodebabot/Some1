import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.metrics import classification_report

# Load the Excel file
file_path = '/mnt/data/your_excel_file.xlsx'  # Update with the correct file path
df = pd.read_excel(file_path)

# Display the first few rows of the dataframe
print(df.head())

# Features and target
X = df.drop(columns=['Notes'])
y = df['Notes']

# Define preprocessing for numerical columns (scaling)
num_features = ['Settlement Amount USD', 'Unmatched Amount USD']
num_transformer = StandardScaler()

# Define preprocessing for categorical columns (one-hot encoding)
cat_features = X.columns.difference(num_features)
cat_transformer = OneHotEncoder(handle_unknown='ignore')

# Define TF-IDF vectorizer for the "Notes" column
text_transformer = TfidfVectorizer()

# Preprocess the non-text features (numerical and categorical)
preprocessor = ColumnTransformer(
    transformers=[
        ('num', num_transformer, num_features),
        ('cat', cat_transformer, cat_features)
    ],
    remainder='drop'
)

# Transform the non-text features
X_preprocessed = preprocessor.fit_transform(X)

# Transform the text features
X_text = text_transformer.fit_transform(y)

# Combine non-text and text features
from scipy.sparse import hstack
X_combined = hstack([X_preprocessed, X_text])

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_combined, y, test_size=0.2, random_state=42)

# Define the model
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Predict on the test set
y_pred = model.predict(X_test)

# Evaluate the model
print(classification_report(y_test, y_pred))
