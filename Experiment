import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import win32com.client as win32
import os
from docx import Document

class OutlookAutomationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Outlook Automation")

        # Create Notebook
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(pady=10, expand=True)

        # Tabs
        self.create_send_email_tab()
        self.create_read_unread_tab()
        self.create_auto_reply_tab()
        self.create_save_attachments_tab()
        self.create_categorize_emails_tab()

    def create_send_email_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Send Email")

        ttk.Label(tab, text="Recipient:").grid(row=0, column=0, padx=10, pady=5)
        self.recipient_entry = ttk.Entry(tab, width=40)
        self.recipient_entry.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(tab, text="Subject:").grid(row=1, column=0, padx=10, pady=5)
        self.subject_entry = ttk.Entry(tab, width=40)
        self.subject_entry.grid(row=1, column=1, padx=10, pady=5)

        ttk.Label(tab, text="Body:").grid(row=2, column=0, padx=10, pady=5)
        self.body_entry = tk.Text(tab, width=40, height=10)
        self.body_entry.grid(row=2, column=1, padx=10, pady=5)

        ttk.Button(tab, text="Send Email", command=self.send_email).grid(row=3, column=1, pady=10)

    def create_read_unread_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Read Unread Emails")

        ttk.Button(tab, text="Read Unread Emails", command=self.read_unread_emails).pack(pady=20)

        self.unread_emails_text = tk.Text(tab, width=80, height=20)
        self.unread_emails_text.pack(pady=10)

    def create_auto_reply_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Auto Reply")

        ttk.Label(tab, text="Email/Domain:").grid(row=0, column=0, padx=10, pady=5)
        self.auto_reply_email_entry = ttk.Entry(tab, width=40)
        self.auto_reply_email_entry.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(tab, text="Template File:").grid(row=1, column=0, padx=10, pady=5)
        self.template_file_entry = ttk.Entry(tab, width=40)
        self.template_file_entry.grid(row=1, column=1, padx=10, pady=5)
        ttk.Button(tab, text="Browse", command=self.browse_template_file).grid(row=1, column=2, padx=10, pady=5)

        ttk.Button(tab, text="Set Auto Reply", command=self.auto_reply).grid(row=2, column=1, pady=10)

    def create_save_attachments_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Save Attachments")

        ttk.Label(tab, text="Keyword:").grid(row=0, column=0, padx=10, pady=5)
        self.save_attachments_keyword_entry = ttk.Entry(tab, width=40)
        self.save_attachments_keyword_entry.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(tab, text="Save Path:").grid(row=1, column=0, padx=10, pady=5)
        self.save_path_entry = ttk.Entry(tab, width=40)
        self.save_path_entry.grid(row=1, column=1, padx=10, pady=5)
        ttk.Button(tab, text="Browse", command=self.browse_save_path).grid(row=1, column=2, padx=10, pady=5)

        ttk.Button(tab, text="Save Attachments", command=self.save_attachments).grid(row=2, column=1, pady=10)

    def create_categorize_emails_tab(self):
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="Categorize Emails")

        ttk.Button(tab, text="Categorize Emails", command=self.categorize_emails).pack(pady=20)

    def send_email(self):
        recipient = self.recipient_entry.get()
        subject = self.subject_entry.get()
        body = self.body_entry.get("1.0", tk.END)
        outlook = win32.Dispatch('outlook.application')
        mail = outlook.CreateItem(0)
        mail.To = recipient
        mail.Subject = subject
        mail.Body = body
        mail.Send()
        messagebox.showinfo("Success", "Email Sent Successfully!")

    def read_unread_emails(self):
        outlook = win32.Dispatch('outlook.application')
        namespace = outlook.GetNamespace('MAPI')
        inbox = namespace.GetDefaultFolder(6)
        messages = inbox.Items
        unread_messages = messages.Restrict("[Unread] = true")

        self.unread_emails_text.delete(1.0, tk.END)
        for message in unread_messages:
            self.unread_emails_text.insert(tk.END, f'From: {message.SenderName}\n')
            self.unread_emails_text.insert(tk.END, f'Subject: {message.Subject}\n\n')

    def browse_template_file(self):
        template_file = filedialog.askopenfilename(filetypes=[("Word Documents", "*.docx")])
        self.template_file_entry.insert(0, template_file)

    def auto_reply(self):
        email_or_domain = self.auto_reply_email_entry.get().lower()
        template_file = self.template_file_entry.get()

        if not os.path.exists(template_file):
            messagebox.showerror("Error", "Template file does not exist!")
            return

        doc = Document(template_file)
        auto_reply_body = "\n".join([para.text for para in doc.paragraphs])

        outlook = win32.Dispatch('outlook.application')
        namespace = outlook.GetNamespace('MAPI')
        inbox = namespace.GetDefaultFolder(6)
        messages = inbox.Items
        unread_messages = messages.Restrict("[Unread] = true")

        for message in unread_messages:
            if email_or_domain in message.SenderEmailAddress.lower() or email_or_domain in message.SenderEmailAddress.lower().split('@')[1]:
                reply = message.Reply()
                reply.Subject = "Re: " + message.Subject
                reply.Body = auto_reply_body
                reply.Send()

        messagebox.showinfo("Success", "Auto Replies Sent Successfully!")

    def browse_save_path(self):
        save_path = filedialog.askdirectory()
        self.save_path_entry.insert(0, save_path)

    def save_attachments(self):
        keyword = self.save_attachments_keyword_entry.get()
        save_path = self.save_path_entry.get()
        outlook = win32.Dispatch('outlook.application')
        namespace = outlook.GetNamespace('MAPI')
        inbox = namespace.GetDefaultFolder(6)
        messages = inbox.Items
        target_messages = messages.Restrict(f"[Subject] LIKE '%{keyword}%'")

        if not os.path.exists(save_path):
            os.makedirs(save_path)

        for message in target_messages:
            attachments = message.Attachments
            for attachment in attachments:
                attachment.SaveAsFile(os.path.join(save_path, attachment.FileName))
        messagebox.showinfo("Success", "Attachments Saved Successfully!")

    def categorize_emails(self):
        outlook = win32.Dispatch('outlook.application')
        namespace = outlook.GetNamespace('MAPI')
        inbox = namespace.GetDefaultFolder(6)
        messages = inbox.Items

        for message in messages:
            if 'urgent' in message.Subject.lower():
                message.Categories = 'Red Category'
            elif 'meeting' in message.Subject.lower():
                message.Categories = 'Blue Category'
            message.Save()
        messagebox.showinfo("Success", "Emails Categorized Successfully!")

if __name__ == "__main__":
    root = tk.Tk()
    app = OutlookAutomationApp(root)
    root.mainloop()
