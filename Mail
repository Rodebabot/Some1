import win32com.client

def on_new_mail(item):
    # Check the sender's job title and display a warning if needed
    sender = item.Sender
    sender_job_title = sender.PropertyAccessor.GetProperty("http://schemas.microsoft.com/mapi/proptag/0x3A17001F")  # Job Title
    if sender_job_title == "Manager":
        print("Warning: You received an email from a Manager.")

outlook = win32com.client.DispatchWithEvents("Outlook.Application", win32com.client.CDispatch)
inbox = outlook.GetNamespace("MAPI").GetDefaultFolder(6)  # 6 represents the Inbox folder
inbox.Items.ItemAdd += on_new_mail

# Keep the script running to handle events
import pythoncom
pythoncom.PumpMessages()



import openpyxl
import tkinter as tk
from tkinter import messagebox

# Load the list of email senders from the Excel file
def load_senders_from_excel(file_path):
    senders = []
    try:
        workbook = openpyxl.load_workbook(file_path)
        sheet = workbook.active

        for row in sheet.iter_rows(min_row=2, max_col=1, values_only=True):
            sender = row[0]
            senders.append(sender)

    except Exception as e:
        print(f"Error loading senders from Excel: {e}")

    return senders

# Check if the sender of the received email matches the list
def check_email_sender(sender, sender_list):
    return sender in sender_list

# Display a warning message on the screen
def show_warning_message():
    root = tk.Tk()
    root.withdraw()  # Hide the main window

    messagebox.showwarning("Warning", "You have received an email from a restricted sender.")
    root.destroy()

if __name__ == "__main__":
    excel_file_path = "sender_list.xlsx"
    sender_list = load_senders_from_excel(excel_file_path)

    # Simulate receiving an email (replace with actual email-checking logic)
    received_sender = "restricted_sender@example.com"

    if check_email_sender(received_sender, sender_list):
        # Show a warning message on the screen
        show_warning_message()
    else:
        print("Email is from an allowed sender.")

