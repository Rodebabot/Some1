import dash
from dash import dcc, html
from dash.dependencies import Input, Output

app = dash.Dash(__name__)

app.layout = html.Div([
    html.Label("Enter root node data:"),
    dcc.Input(id='root-input', type='text', value=''),
    html.Button('Create Tree', id='create-button'),
    dcc.Graph(id='tree-diagram'),
])

class Node:
    def __init__(self, data):
        self.data = data
        self.children = []

def create_tree(node):
    tree_data = {'id': node.data, 'children': []}

    print(f"Enter children for node {node.data} (comma-separated, or press Enter for no children): ")
    children_input = input().split(',')

    for child_data in children_input:
        child_data = child_data.strip()
        if child_data:
            child_node = Node(child_data)
            node.children.append(child_node)
            tree_data['children'].append(create_tree(child_node))

    return tree_data

@app.callback(
    Output('tree-diagram', 'figure'),
    [Input('create-button', 'n_clicks')],
    prevent_initial_call=True
)
def update_tree(n_clicks):
    root_data = app.callback_context.inputs['root-input.value']
    root = Node(root_data)
    tree_data = create_tree(root)

    return {
        'data': [],
        'layout': {
            'title': 'Tree Diagram',
            'annotations': [
                {
                    'text': root_data,
                    'x': 0.5,
                    'y': 0.5,
                    'showarrow': False,
                },
            ],
        },
        'layout': {'title': 'Tree Diagram'},
        'tree': tree_data
    }

if __name__ == '__main__':
    app.run_server(debug=True)
