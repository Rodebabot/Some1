import tkinter as tk
from tkinter import ttk, messagebox
import pandas as pd
import webbrowser
import win32com.client as win32  # Import the pywin32 library
from datetime import datetime

# Load the Excel file into a DataFrame
df = pd.read_excel("your_excel_file.xlsx")

def rank_keywords(input_sentence):
    # Split the input sentence into words
    keywords = input_sentence.lower().split()
    
    # Create a dictionary to store keyword ranks
    keyword_ranks = {}
    
    # Rank keywords based on their appearance in the input sentence
    for i, keyword in enumerate(keywords):
        if keyword in df['Keyword'].str.lower().values:
            keyword_ranks[keyword] = i
    
    # Sort keywords by rank (lower rank means higher priority)
    ranked_keywords = sorted(keyword_ranks.keys(), key=lambda x: keyword_ranks[x])
    
    return ranked_keywords

def search_keywords():
    user_input = entry.get()
    ranked_keywords = rank_keywords(user_input)
    
    first_keyword = ranked_keywords[0] if ranked_keywords else None
    keyword_displaywords = []  # List to store displaywords for the first keyword
    close_matches = []  # List to store keyword - displayword pairs for other keywords
    
    for keyword in ranked_keywords:
        for index, row in df.iterrows():
            keyword_in_row = row['Keyword'].lower()
            display_word = row['DisplayWord']
            
            if keyword_in_row == keyword:
                if keyword_in_row == first_keyword:
                    keyword_displaywords.append(display_word)
                else:
                    formatted_item = f"{keyword_in_row} - {display_word}"
                    close_matches.append(formatted_item)
    
    displaywords_box.delete(0, tk.END)
    close_matches_box.delete(0, tk.END)
    
    if not keyword_displaywords:
        escalate_button.config(state=tk.NORMAL)  # Enable the Escalate button
        register_query_button.config(state=tk.NORMAL)  # Enable the Register Query button
    else:
        escalate_button.config(state=tk.DISABLED)  # Disable the Escalate button
        register_query_button.config(state=tk.DISABLED)  # Disable the Register Query button
    
    for display_word in keyword_displaywords:
        displaywords_box.insert(tk.END, display_word)
    
    for item in close_matches:
        close_matches_box.insert(tk.END, item)

def open_url(event):
    selected_item = displaywords_box.get(displaywords_box.curselection())
    if selected_item:
        for index, row in df.iterrows():
            if row['DisplayWord'] == selected_item:
                webbrowser.open(row['URL'])
    
    selected_item = close_matches_box.get(close_matches_box.curselection())
    if selected_item:
        keyword_displayword = selected_item.split(" - ")
        keyword = keyword_displayword[0]
        display_word = keyword_displayword[1]
        for index, row in df.iterrows():
            if row['Keyword'].lower() == keyword.lower() and row['DisplayWord'] == display_word:
                webbrowser.open(row['URL'])

def copy_keyword():
    selected_item = close_matches_box.get(close_matches_box.curselection())
    if selected_item:
        keyword = selected_item.split(" - ")[0]  # Extract the keyword
        entry.delete(0, tk.END)
        entry.insert(0, keyword)
        # Copy the keyword to the clipboard
        root.clipboard_clear()
        root.clipboard_append(keyword)
        root.update()

def escalate():
    # Open a new window for escalating
    escalate_window = tk.Toplevel(root)
    escalate_window.title("Escalate Issue")
    
    # Create a label with the search sentence
    search_sentence_label = tk.Label(escalate_window, text="Search Sentence:")
    search_sentence_label.grid(row=0, column=0, padx=10, pady=10)
    
    # Create an entry field with the search sentence
    search_sentence_entry = ttk.Entry(escalate_window, width=30)
    search_sentence_entry.grid(row=0, column=1, padx=10, pady=10)
    search_sentence_entry.insert(0, entry.get())
    
    # Create a label for user's query
    user_query_label = tk.Label(escalate_window, text="User Query:")
    user_query_label.grid(row=1, column=0, padx=10, pady=10)
    
    # Create a text box for user's query
    user_query_text = tk.Text(escalate_window, width=30, height=5)
    user_query_text.grid(row=1, column=1, padx=10, pady=10)
    
    def send_mail():
        search_sentence = search_sentence_entry.get()
        user_query = user_query_text.get("1.0", tk.END)
        
        # Compose the email
        subject = search_sentence
        body = user_query
        send_email(subject, body)
        
        # Close the escalate window
        escalate_window.destroy()
    
    # Create a button to send the email
    send_mail_button = ttk.Button(escalate_window, text="Send Mail", command=send_mail)
    send_mail_button.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

def send_email(subject, body):
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.Subject = subject
    mail.Body = body
    mail.Recipients.Add('recipient_email')  # Replace 'recipient_email' with the recipient's email address
    mail.Send()

    messagebox.showinfo("Email Sent", "Your email has been sent successfully.")

def register_query():
    # Open a new window for registering a query
    register_query_window = tk.Toplevel(root)
    register_query_window.title("Register Query")
    
    # Create a label with the search sentence
    search_sentence_label = tk.Label(register_query_window, text="Search Sentence:")
    search_sentence_label.grid(row=0, column=0, padx=10, pady=10)
    
    # Create an entry field with the search sentence
    search_sentence_entry = ttk.Entry(register_query_window, width=30)
    search_sentence_entry.grid(row=0, column=1, padx=10, pady=10)
    search_sentence_entry.insert(0, entry.get())
    
    # Create a label for user's name
    user_name_label = tk.Label(register_query_window, text="Your Name:")
    user_name_label.grid(row=1, column=0, padx=10, pady=10)
    
    # Create an entry field for user's name
    user_name_entry = ttk.Entry(register_query_window, width=30)
    user_name_entry.grid(row=1, column=1, padx=10, pady=10)
    
    # Create a label for business segment
    business_segment_label = tk.Label(register_query_window, text="Business Segment:")
    business_segment_label.grid(row=2, column=0, padx=10, pady=10)
    
    # Create an entry field for business segment
    business_segment_entry = ttk.Entry(register_query_window, width=30)
    business_segment_entry.grid(row=2, column=1, padx=10, pady=10)
    
    def submit_query():
        search_sentence = search_sentence_entry.get()
        user_name = user_name_entry.get()
        business_segment = business_segment_entry.get()
        
        # Add the data to the Excel sheet
        current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        new_data = {'Search Sentence': search_sentence, 'User Name': user_name, 'Business Segment': business_segment, 'Datetime': current_datetime}
        df = pd.read_excel("your_excel_file.xlsx")
        df = df.append(new_data, ignore_index=True)
        df.to_excel("your_excel_file.xlsx", index=False)
        
        # Close the register query window
        register_query_window.destroy()
    
    # Create a button to submit the query
    submit_query_button = ttk.Button(register_query_window, text="Submit Query", command=submit_query)
    submit_query_button.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

# Create the main Tkinter window
root = tk.Tk()
root.title("Keyword Search App")

# Create and configure the search entry field
entry = ttk.Entry(root, width=30)
entry.grid(row=0, column=0, padx=10, pady=10)

# Create and configure the search button
search_button = ttk.Button(root, text="Search", command=search_keywords)
search_button.grid(row=0, column=1, padx=10, pady=10)

# Create and configure the displaywords listbox
displaywords_box = tk.Listbox(root, width=50, height=5)
displaywords_box.grid(row=1, column=0, columnspan=2, padx=10, pady=10)
displaywords_box.bind('<Double-Button-1>', open_url)

# Create and configure the close matches listbox

close_matches_box = tk.Listbox(root, width=50, height=5)
close_matches_box.grid(row=2, column=0, columnspan=2, padx=10, pady=10)
close_matches_box.bind('<Double-Button-1>', open_url)

# Create an Escalate button
escalate_button = ttk.Button(root, text="Escalate", command=escalate, state=tk.DISABLED)
escalate_button.grid(row=3, column=0, padx=10, pady=10)

# Create a Register Query button
register_query_button = ttk.Button(root, text="Register Query", command=register_query, state=tk.DISABLED)
register_query_button.grid(row=3, column=1, padx=10, pady=10)

root.mainloop()





# Add the data to the Excel sheet
current_datetime = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
new_data = {'Search Sentence': [search_sentence], 'User Name': [user_name], 'Business Segment': [business_segment], 'Datetime': [current_datetime]}
df = pd.read_excel("your_excel_file.xlsx")

# Create a new DataFrame with the new data
new_df = pd.DataFrame(new_data)

# Concatenate the new DataFrame with the existing DataFrame
df = pd.concat([df, new_df], ignore_index=True)

# Save the updated DataFrame to the Excel file
df.to_excel("your_excel_file.xlsx", index=False)
