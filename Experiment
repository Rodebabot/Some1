import pandas as pd
from collections import Counter
import re

# List of specified ROCs
specified_rocs = [
    'counterpartytoaction', 
    'cptytoactioneconomicbreak', 
    'cptytoactiontemplatenegotiation'
]

# Ensure 'Days Spent' column is numeric
action['Days Spent'] = pd.to_numeric(action['Days Spent'], errors='coerce')

# Filter the dataframe to include only the specified ROCs
filtered_action = action[action['ROC'].isin(specified_rocs)]

# Group by Counterparty Name, ROC, Business Event, and Product Representation, then calculate the median of Days Spent
median_days = filtered_action.groupby(['Counterparty Name', 'ROC', 'Business Event', 'Product Representation'])['Days Spent'].median().reset_index()

# For each specified ROC, find the top 30 counterparties with the highest median Days Spent
top_30_per_roc = pd.DataFrame()

for roc in specified_rocs:
    top_30 = median_days[median_days['ROC'] == roc].nlargest(30, 'Days Spent')
    top_30['Rank'] = top_30['Days Spent'].rank(ascending=False)
    top_30_per_roc = pd.concat([top_30_per_roc, top_30])

# Analyze the Latest Confirmation Status Comment for the top 30 counterparties per ROC
def clean_text(text):
    # Remove special characters, numbers, and extra spaces
    text = re.sub(r'[^A-Za-z\s]', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

comments_analysis = {}

for roc in specified_rocs:
    comments = filtered_action[filtered_action['ROC'] == roc]
    top_30_counterparties = top_30_per_roc[top_30_per_roc['ROC'] == roc]['Counterparty Name'].unique()
    relevant_comments = comments[comments['Counterparty Name'].isin(top_30_counterparties)]['Latest Confirmation Status Comment'].dropna().apply(clean_text)
    words = ' '.join(relevant_comments).split()
    most_common_words = Counter(words).most_common(10)  # Change 10 to any number to get more frequent words
    comments_analysis[roc] = most_common_words

# Print the results
for roc, words in comments_analysis.items():
    print(f"Top words/phrases for ROC {roc}:")
    for word, count in words:
        print(f"{word}: {count}")
    print("\n")

# Save the results to a CSV file
results = []

for roc, words in comments_analysis.items():
    for word, count in words:
        results.append({'ROC': roc, 'Word/Phrase': word, 'Count': count})

results_df = pd.DataFrame(results)
results_df.to_csv('/mnt/data/comments_analysis_per_roc.csv', index=False)
