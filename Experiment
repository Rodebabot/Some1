import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output, State

# Load data from the Excel file
file_path = '/mnt/data/your_excel_file.xlsx'  # Update with your file path
df = pd.read_excel(file_path, sheet_name='Sheet1')

# Repeat merged cell values
df.ffill(inplace=True)

# Dynamically sum the date columns
date_columns = df.columns[3:]  # Assuming the first three columns are fixed (Entity, Counterparty Name, CCY)

# Reshape the DataFrame for easier aggregation and filtering
aggregated_df = df.melt(id_vars=['Entity', 'Counterparty Name', 'CCY'], value_vars=date_columns, var_name='Date', value_name='Value')
sum_df = aggregated_df.groupby(['Entity', 'CCY', 'Date'])['Value'].sum().reset_index()

# Initialize Dash app
app = dash.Dash(__name__)

app.layout = html.Div([
    html.H1("Entity and CCY Sums by Date"),
    html.Ul(id='sum-list'),
    html.H1("Detailed Data Distribution"),
    html.Div(id='detailed-data')
])

@app.callback(
    Output('sum-list', 'children'),
    Input('sum-list', 'n_clicks')
)
def update_sum_list(n_clicks):
    # Create list of sums by Entity and CCY for each date
    sum_list = []
    for i, row in sum_df.iterrows():
        sum_list.append(html.Li(f"{row['Entity']} (Entity), {row['CCY']} (CCY), Date: {row['Date']}, Sum: {row['Value']}",
                                id={'type': 'sum-item', 'index': i}))
    return sum_list

@app.callback(
    Output('detailed-data', 'children'),
    [Input({'type': 'sum-item', 'index': dash.dependencies.ALL}, 'n_clicks')],
    [State({'type': 'sum-item', 'index': dash.dependencies.ALL}, 'id')]
)
def display_detailed_data(n_clicks, ids):
    ctx = dash.callback_context
    if not ctx.triggered:
        return "Click on a sum to see details."
    
    clicked_id = ctx.triggered[0]['prop_id'].split('.')[0]
    index = eval(clicked_id)['index']

    entity = sum_df.iloc[index]['Entity']
    ccy = sum_df.iloc[index]['CCY']
    date = sum_df.iloc[index]['Date']
    
    filtered_df = df[(df['Entity'] == entity) & (df['CCY'] == ccy)]

    # Filter the detailed data for the specific date
    detailed_data = filtered_df[['Counterparty Name', date]].rename(columns={date: 'Value'})
    detailed_data = detailed_data[detailed_data['Value'] != 0]

    # Create a detailed view of the filtered data
    detail = []
    for i, row in detailed_data.iterrows():
        detail.append(html.P(f"Entity: {entity}, Counterparty Name: {row['Counterparty Name']}, CCY: {ccy}, Date: {date}, Value: {row['Value']}"))

    return detail

if __name__ == '__main__':
    app.run_server(debug=True)
