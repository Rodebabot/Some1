import pandas as pd

# Load the Excel file
file_path = '/mnt/data/your_excel_file.xlsx'  # Replace with the actual file path
df = pd.read_excel(file_path)

# Ensure the column names are correct as per the provided screenshot
df.columns = ['Unique Eventid', 'Legal Entity', 'Trade ID', 'ROC', 'Age', 'Age Band', 'Counterparty Name', 'Business Event', 'Product Representation', 'Days Spent']

# Group by Unique Eventid to find the maximum age
df['Total Age'] = df.groupby('Unique Eventid')['Age'].transform('max')

# For each Unique Eventid, find the ROC and Age Band where the maximum days were spent
df_max_days = df.loc[df.groupby('Unique Eventid')['Days Spent'].idxmax()]

# Calculate the percentage of each ROC and Age Band combination contributing to the total age
roc_age_counts = df_max_days.groupby(['ROC', 'Age Band']).size().reset_index(name='Count')
total_event_ids = df['Unique Eventid'].nunique()
roc_age_counts['Percentage'] = (roc_age_counts['Count'] / total_event_ids) * 100

# Sort the summary table by the percentage in descending order
roc_age_counts = roc_age_counts.sort_values(by='Percentage', ascending=False)

# Group by ROC, Age Band, Legal Entity, Business Event, and Product Representation to get counts
df_cluster = df_max_days.groupby(['ROC', 'Age Band', 'Legal Entity', 'Business Event', 'Product Representation']).size().reset_index(name='Cluster Count')

# Create a function to get the top 3 clusters for each ROC and Age Band combination
def get_top_clusters(group):
    return group.nlargest(3, 'Cluster Count')

# Apply the function to get top clusters
top_clusters = df_cluster.groupby(['ROC', 'Age Band']).apply(get_top_clusters).reset_index(drop=True)

# Save the results to a new Excel file
roc_age_counts.to_excel('/mnt/data/roc_age_band_contribution_summary.xlsx', index=False)
top_clusters.to_excel('/mnt/data/top_clusters_summary.xlsx', index=False)

print("Analysis completed. Summary saved to roc_age_band_contribution_summary.xlsx and top_clusters_summary.xlsx")
